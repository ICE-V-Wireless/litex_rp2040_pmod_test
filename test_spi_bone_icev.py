#!/usr/bin/env python3

# RR2040 PMOD <-> LiteX SoC proof of concept.
#
# Copyright (c) 2021-2022 Florent Kermarrec <florent@enjoy-digital.fr>
# SPDX-License-Identifier: BSD-2-Clause

import time

from machine import Pin, SPI

# Registers ----------------------------------------------------------------------------------------

# FIXME: Try to reuse csr.csv generated by LiteX.
# FIXME: Increase similarities with LiteX-Server.
CSR_IDENTIFIER = 0x00000800
CSR_LEDS       = 0x00001000
CSR_BUTTONS    = 0x00000000

# SPI Bone -----------------------------------------------------------------------------------------

class SPIBone:
    def __init__(self, pins={"sck": 6, "csn": 1, "mosi": 7, "miso": 4}, clk_freq=1e6):
        self.csn = Pin(pins["csn"], Pin.OUT, value=1)
        self.spi = SPI(0, baudrate=int(clk_freq), polarity=0, phase=0,
            sck  = Pin(pins["sck"]),
            mosi = Pin(pins["mosi"]),
            miso = Pin(pins["miso"])
        )

    def write(self, address, value):
        self.csn.low()
        self.spi.write(int(0x0).to_bytes(1, "big"))
        self.spi.write( address.to_bytes(4, "big"))
        self.spi.write(   value.to_bytes(4, "big"))
        self.spi.read(1)
        self.csn.high()

    def read(self, address):
        self.csn.low()
        self.spi.write(int(0x1).to_bytes(1, "big"))
        self.spi.write( address.to_bytes(4, "big"))
        self.spi.read(1)
        value = int.from_bytes(self.spi.read(4), 4, "big")
        self.csn.high()
        return value

bus = SPIBone()

# Demo ---------------------------------------------------------------------------------------------

def identifier_demo():
    print("Identifier:")
    identifier = ""
    for i in range(256):
        c = chr(bus.read(CSR_IDENTIFIER + 4*i) & 0xff)
        identifier += c
        if c == "\0":
            break
    print(identifier)

def leds_demo():
    print("Leds Demo:")

    print("Counter mode...")
    for i in range(16):
        bus.write(CSR_LEDS, i)
        time.sleep(0.1)

    print("Shift mode...")
    for i in range(8):
        bus.write(CSR_LEDS, 1<<i)
        time.sleep(0.1)
    for i in reversed(range(8)):
        bus.write(CSR_LEDS, 1<<i)
        time.sleep(0.1)

    print("Dance mode...\n");
    for i in range(4):
        bus.write(CSR_LEDS, 0x55)
        time.sleep(0.2)
        bus.write(CSR_LEDS, 0xaa)
        time.sleep(0.2)

def buttons_demo():
    print("Buttons Demo:")
    for i in range(16):
        value = bus.read(CSR_BUTTONS)
        print("btn1: {}, btn2: {}, btn3 {}".format(
            (value >> 0) & 0b1,
            (value >> 1) & 0b1,
            (value >> 2) & 0b1,
        ))
        time.sleep(0.2)

identifier_demo()
leds_demo()
#buttons_demo()
